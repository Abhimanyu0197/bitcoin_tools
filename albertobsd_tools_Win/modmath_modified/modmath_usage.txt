Modular Math secp256k1 N (group order) as modulus. Results of operations are the same as you would it with points(public keys).
This way you can do research on the secp256k1 curve.

$ ./modmath 1 / 2 10
Result: 57896044618658097711785492504343953926418782139537452191302581570759080747169

$ ./modmath 1 / 2 16
Result: 7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a1

$ ./modmath 57896044618658097711785492504343953926418782139537452191302581570759080747168 + 57896044618658097711785492504343953926418782139537452191302581570759080747168 10
Result: 115792089237316195423570985008687907852837564279074904382605163141518161494336

$ ./modmath 57896044618658097711785492504343953926418782139537452191302581570759080747169 - 57896044618658097711785492504343953926418782139537452191302581570759080747168 10
Result: 1

here we use lowercase x letter as multiplication operation sign.
$ ./modmath 57896044618658097711785492504343953926418782139537452191302581570759080747169 x 57896044618658097711785492504343953926418782139537452191302581570759080747168 10
Result: 28948022309329048855892746252171976963209391069768726095651290785379540373584

decimal to hex convert.
$ ./modmath 115792089237316195423570985008687907852837564279074904382605163141518161494336 + 0 16
Result: fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140 

hex to decimal convert.
$ ./modmath 0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140 + 0 10
Result: 115792089237316195423570985008687907852837564279074904382605163141518161494336
